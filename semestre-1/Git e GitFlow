# Relatório de Estudos
**Nome do Estágiario:** Millena França\
**Data:** 01/08

**Módulos/Etapas Feitas:**  
1. **Git**
2. **Git Flow**

## Resumo dos módulos 
### Git

Git é um sistema de controle de versão utilizado para identificar alterações em arquivos e controlar o desenvolvimento simultâneo dos colaboradores no projeto.

#### Principais Conceitos do Git
- **Repositório:** Diretório onde o projeto é armazenado.
- **Commit:** Registro/identificador de mudanças.
- **Branch:** Uma ramificação do projeto que permite trabalhar em diferentes linhas de desenvolvimento ao mesmo tempo.
- **Merge:** Combinação de mudanças de diferentes branches em uma única branch.
- **Pull:** Atualiza a cópia local do repositório com as mudanças mais recentes do repositório remoto.
- **Push:** Envia as mudanças locais para o repositório remoto.
- **Clone:** Criação de uma cópia local de um repositório remoto.
- **Fork:** Criação de uma cópia independente de um repositório, normalmente para contribuir com um projeto sem afetar o repositório original.

#### Principais Comandos
- git clone <link>: baixar o codigo existente de um repositório remoto.
- git branch <nome-da-branch>: criar uma branch.
- git checkout <nome-da-branch>: entrar em uma branch.
- git status: coletar informações da branch atual.
- git add *: incluir todas as alterações feitas no próximo commit.
- git commit -m "mensagem do commit": salvar e identificar suas alterações.
- git push: enviar suas alterações ao repositório.
- git pull <repositório-remoto>: puxar as alterações feitas no repositório.

### Git Flow

Git flow é um método para melhor organização de fluxo, uma estratégia para facilitar a organização do versionamento de códigos. 
No git flow trabalhamos com duas branches principais, sendo elas a develop e a master/main, que duram para sempre. Para desenvolver coisas 
especificas utilizamos branches temporárias (feature, release e hotfix) que são deletadas após o merge com as branches principais.

#### Branches
1. Principais:
   - main/master: armazena o código de produção, todas as funcionalidades desenvolvidas serão mescladas a ela em algum momento;
   - develop: contém o código com os últimos desenvolvimentos porém que ainda não foram oficialmente publicados.
    
2. Temporárias:
   - feature: utilizada para o desenvolvimento de novas funcionalidades;
   - hotfix: utilizada para realizar correções urgentes;
   - release: utilizada para lançar uma nova versão, auxilia no merge entre develop e main.

Com o desenvolvimento em branches separadas, quando parte do código está pronto para ser lançado, ele é mesclado com a develop e assim pode ser testado
em conjunto com o restante. Ou seja, por mais que essa metodologia seja complexa e extensa, podendo ocorrer conflitos de merge, quando se trabalha com
diversos desenvolvedores ao mesmo tempo é uma boa opção devido sua melhor organização e estabilidade.

**Desafios Encontrados:**  
Durante o uso do git com o git flow encontrei dificuldades ao utilizar comandos, as vezes na hora de subir projetos e na hora de dar merge, onde houveram conflitos.

**Próximos Passos:**  
Vou ir para as trilhas de Engenharia de Dados e BigData, me aprofundar um pouco na análise de dados, modos de processamento e coisas relacionadas.
